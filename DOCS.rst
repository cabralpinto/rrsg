Developer Interface
===================

Main Interface
--------------
``rrsg.compile(generator)``
  Returns a ``Compiled`` object, that is the compilation of the generator string, from which it is possible to generate randomised strigs.

``rrsg.generate(generator)``
  Returns a ``Results`` object, that contains the strings generated by the generator string. The same as ``compile(generator).generate()``.
  
Exceptions
----------
``rrsg.RandomGenerationError``
  Thrown when the generator string does not comply with the documentation
  
Classes
-------
``_Compiler``
  For internal use. Able to compile a generator string.
  
  - ``_compile_var(var_b)``

  - ``_compile_datatag(datatag_b)``

  - ``_compile_items(items_b)``

  - ``_compile_string(string_b, categories_c, vars_c)``

  - ``_compile()``
  
  
``Compiled``
  Compiled generator. Used to generate random strings directly.
  
  - ``_generate_value(value_c)``
  
  - ``_generate_item(category_c)``
  
  - ``_generate_string(string_c)``
  
  - ``generate()``

``Results``
  Storage for results of the random generation. This includes the strings themselves and, futurely, other data.
  
  - ``strings()``
  
Generator Syntax
================

Comments:
  ``//this is a comment. nothing after the '//' is read by the compiler.``

Variables:
  ``&var_name = value OR &var_name = (random_from_value, to_value)``

Categories:
  ``$category``
  
  ``item1 {datatag}``
  
  ``item2 {datatag}``
  
  ``item3``
  
  ``...``

Bite-sized categories:
  ``[item1 {datatag} | item2 | ...]``

Datatags:
  ``item1 {50%, var1 += 3} //item1 has a 50% chance of being randomly picked and will increase var1 by 3 if picked ("=" and "-=" operators are also available).``

Results:
  ``>[Hey {75%} | Hi there]! This is a $adjective result. It's returned along other &num results in an iterable.``

Other info:
  - Empty lines will be ignored.
  
  - Unnecessary spaces will be ignored. Example: [item {50%, var = 3} | item with spaces] <=> ``[item{50%,var=3}|item with spaces]``.
  
  - Unnecessary characters will be ignored, although following the documentation strictly is advised, as this feature is not fully tested. Example: ``&height = 182m`` <=> ``&height = 182`` 

